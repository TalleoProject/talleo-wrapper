cmake_minimum_required(VERSION 3.0)

cmake_policy(SET CMP0048 NEW)

set(VERSION "0.1")
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cryptonote/cmake")

# parse project version from cryptonote/src/version.h.in
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cryptonote/src/version.h.in" VERSION_FILE)
string(REGEX REPLACE ".*APP_VER_MAJOR ([0-9]+).*" "" DUMMY ${VERSION_FILE})
set(VER_MAJOR ${CMAKE_MATCH_1})
string(REGEX REPLACE "APP_VER_MINOR ([0-9]+)" "" DUMMY ${VERSION_FILE})
set(VER_MINOR ${CMAKE_MATCH_1})
string(REGEX REPLACE "APP_VER_REV ([0-9]+)" "" DUMMY ${VERSION_FILE})
set(VER_PATCH ${CMAKE_MATCH_1})
string(REGEX REPLACE "APP_VER_BUILD ([0-9]+)" "" DUMMY ${VERSION_FILE})
set(VER_TWEAK ${CMAKE_MATCH_1})
unset(DUMMY)
message("Version: ${VER_MAJOR}.${VER_MINOR}.${VER_PATCH}.${VER_TWEAK}")
project(TalleoWrapper VERSION ${VER_MAJOR}.${VER_MINOR}.${VER_PATCH}.${VER_TWEAK} LANGUAGES C CXX)

if(CMAKE_TOOLCHAIN_FILE)
  message("Toolchain: ${CMAKE_TOOLCHAIN_FILE}")
endif()
message("System: ${CMAKE_SYSTEM_NAME}")
message("Processor: ${CMAKE_SYSTEM_PROCESSOR}")
message("Config: ${CMAKE_BUILD_TYPE}")

if(MSVC)
  add_definitions("-EHsc" "-DWIN32" "-DBUILD_DLL")
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions("-MTd")
  else()
    add_definitions("-MT")
  endif()
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Windows)
elseif(APPLE)
  add_definitions("-DOSX" "-DPOSIX" "-DBUILD_DLL")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fvisibility=hidden")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fvisibility=hidden")
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/OSX)
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Posix)
elseif(ANDROID)
  add_definitions("-DANDROID" "-DPOSIX" "-DBUILD_DLL")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fvisibility=hidden")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fvisibility=hidden")
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Android)
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Posix)
else()
  add_definitions("-DLINUX" "-DPOSIX" "-DBUILD_DLL")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fvisibility=hidden")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fvisibility=hidden")
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Linux)
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/src/Platform/Posix)
endif()

find_package(RocksDB)
if(ROCKSDB_FOUND)
  include_directories(SYSTEM ${ROCKSDB_INCLUDE_DIRS})
else()
  include_directories(${CMAKE_SOURCE_DIR}/cryptonote/external/rocksdb/include)
endif()

add_subdirectory(cryptonote EXCLUDE_FROM_ALL)

include_directories(include cryptonote cryptonote/include cryptonote/src ${Boost_INCLUDE_DIR})

file(GLOB_RECURSE Wrapper src/*)

add_library(TalleoWrapper SHARED ${Wrapper})

if(ANDROID)
target_link_libraries(TalleoWrapper Common CryptoNoteCore Http Logging Mnemonics NodeRpcProxy Rpc System Wallet Transfers AndroidCompat)
else()
target_link_libraries(TalleoWrapper Common CryptoNoteCore Http Logging Mnemonics NodeRpcProxy Rpc System Wallet Transfers)
endif()
